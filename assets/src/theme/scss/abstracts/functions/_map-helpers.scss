/**
 * Map helpers
 * These are actually mixins and not functions but we're keeping them here since they have to be loaded before variables and other mixins.
 */


/**
 * Force ascending order in a map
 */
@mixin assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" { /* stylelint-disable-line scss/at-if-no-null */
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    $prev-key: $key;
    $prev-num: $num;
  }
}


/**
 * Force a map to start at zero
 */
@mixin assert-starts-at-zero($map, $map-name) {
  @if length($map) > 0 {
    $values: map-values($map);
    $first-value: nth($values, 1);

    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}
